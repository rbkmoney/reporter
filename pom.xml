<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.rbkmoney</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.1.RELEASE</version>
    </parent>

    <artifactId>reporter</artifactId>
    <version>1.10.24-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>reporter</name>
    <description>Reporter service</description>

    <properties>
        <postgresql.version>42.2.5</postgresql.version>
        <lombok.version>1.18.4</lombok.version>
        <sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
        <hikari.version>3.1.0</hikari.version>
        <spring.kafka.version>2.2.3.RELEASE</spring.kafka.version>
        <jxls.version>2.4.0</jxls.version>
        <jxls.poi.version>1.0.14</jxls.poi.version>
        <!---->
        <server.port>8022</server.port>
        <exposed.ports>${server.port}</exposed.ports>
        <dockerfile.base.service.tag>c0d0900ec19c907d866f8360031a836049985110</dockerfile.base.service.tag>
        <dockerfile.build.tag>a3d509385d655f6a5ada4b37c5884d5423aeb78b</dockerfile.build.tag>
        <dockerfile.registry>dr2.rbkmoney.com</dockerfile.registry>
        <!-- <dockerfile.registry>${env.REGISTRY}</dockerfile.registry> -->
        <metrics.version>1.1.0</metrics.version>
        <shared.resources.version>0.3.6</shared.resources.version>
        <eventstock.version>1.2.6</eventstock.version>
        <damsel.version>1.315-78c1128</damsel.version>
        <!---->
        <db.name>reporter</db.name>
        <db.schema>rpt</db.schema>
        <db.user>postgres</db.user>
        <db.password>postgres</db.password>
        <db.port>5432</db.port>
        <db.url>jdbc:postgresql://localhost:${db.port}/${db.name}</db.url>
        <!---->
        <db.embedded.name>${db.name}</db.embedded.name>
        <db.embedded.schema>${db.schema}</db.embedded.schema>
        <db.embedded.user>${db.user}</db.embedded.user>
        <db.embedded.password>${db.password}</db.embedded.password>
        <db.embedded.port>15432</db.embedded.port>
        <db.embedded.url>jdbc:postgresql://localhost:${db.embedded.port}/${db.embedded.name}</db.embedded.url>
    </properties>

    <dependencies>
        <!--rbkmoney-->
        <dependency>
            <groupId>com.rbkmoney</groupId>
            <artifactId>shared-resources</artifactId>
            <version>${shared.resources.version}</version>
        </dependency>
        <dependency>
            <groupId>com.rbkmoney</groupId>
            <artifactId>eventstock-client-damsel</artifactId>
            <version>${eventstock.version}</version>
        </dependency>
        <dependency>
            <groupId>com.rbkmoney</groupId>
            <artifactId>spring-boot-starter-metrics-statsd</artifactId>
            <version>${metrics.version}</version>
        </dependency>
        <dependency>
            <groupId>com.rbkmoney</groupId>
            <artifactId>damsel</artifactId>
            <version>${damsel.version}</version>
        </dependency>
        <dependency>
            <groupId>com.rbkmoney</groupId>
            <artifactId>machinegun-proto</artifactId>
            <version>1.12-ebae56f</version>
        </dependency>
        <dependency>
            <groupId>com.rbkmoney</groupId>
            <artifactId>sink-common-lib</artifactId>
            <version>0.0.3</version>
        </dependency>
        <dependency>
            <groupId>com.rbkmoney</groupId>
            <artifactId>kafka-common-lib</artifactId>
            <version>0.0.9</version>
        </dependency>


        <!--spring-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-validator</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
            <version>${spring.kafka.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>

        <!--third party-->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>${hikari.version}</version>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>${jooq.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jxls</groupId>
            <artifactId>jxls</artifactId>
            <version>${jxls.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jxls</groupId>
            <artifactId>jxls-poi</artifactId>
            <version>${jxls.poi.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>

        <!--Thrirdparty libs-->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-java-sdk-s3</artifactId>
            <version>1.11.587</version>
        </dependency>
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz-jobs</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.cronutils</groupId>
            <artifactId>cron-utils</artifactId>
            <version>7.0.1</version>
        </dependency>

        <!--Test libs-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.github.benas</groupId>
            <artifactId>random-beans</artifactId>
            <version>3.6.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.rbkmoney</groupId>
            <artifactId>easyway</artifactId>
            <version>0.1.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>${project.build.directory}/maven-shared-archive-resources</directory>
                <targetPath>${project.build.directory}</targetPath>
                <includes>
                    <include>Dockerfile</include>
                </includes>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${project.build.directory}/maven-shared-archive-resources</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>Dockerfile</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>**/*.xlsx</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <include>**/*.xlsx</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.2</version>
                <configuration>
                    <destFile>${sonar.jacoco.reportPath}</destFile>
                    <append>true</append>
                </configuration>
                <executions>
                    <execution>
                        <id>agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-remote-resources-plugin</artifactId>
                <version>1.5</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.shared</groupId>
                        <artifactId>maven-filtering</artifactId>
                        <version>1.3</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <resourceBundles>
                        <resourceBundle>com.rbkmoney:shared-resources:${shared.resources.version}</resourceBundle>
                    </resourceBundles>
                    <attachToMain>false</attachToMain>
                    <attachToTest>false</attachToTest>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>process</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>${flyway.version}</version>
                <configuration>
                    <url>${db.embedded.url}</url>
                    <user>${db.embedded.user}</user>
                    <password>${db.embedded.password}</password>
                    <schemas>
                        <schema>${db.embedded.schema}</schema>
                    </schemas>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.postgresql</groupId>
                        <artifactId>postgresql</artifactId>
                        <version>${postgresql.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>migrate</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>clean</goal>
                            <goal>migrate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>${jooq.version}</version>
                <configuration>
                    <jdbc>
                        <driver>org.postgresql.Driver</driver>
                        <url>${db.embedded.url}</url>
                        <user>${db.embedded.user}</user>
                        <password>${db.embedded.password}</password>
                    </jdbc>
                    <generator>
                        <generate>
                            <javaTimeTypes>true</javaTimeTypes>
                            <pojos>true</pojos>
                            <pojosEqualsAndHashCode>true</pojosEqualsAndHashCode>
                            <pojosToString>true</pojosToString>
                        </generate>
                        <database>
                            <name>org.jooq.meta.postgres.PostgresDatabase</name>
                            <includes>.*</includes>
                            <excludes>schema_version|flyway_schema_history</excludes>
                            <inputSchema>${db.embedded.schema}</inputSchema>
                            <customTypes>
                                <customType>
                                    <name>FinalCashFlow</name>
                                    <type>com.rbkmoney.reporter.util.json.FinalCashFlow</type>
                                    <binding>com.rbkmoney.reporter.util.json.FinalCashFlowBinding</binding>
                                </customType>
                                <customType>
                                    <name>PayoutSummary</name>
                                    <type>com.rbkmoney.reporter.util.json.PayoutSummary</type>
                                    <binding>com.rbkmoney.reporter.util.json.PayoutSummaryBinding</binding>
                                </customType>
                            </customTypes>
                            <forcedTypes>
                                <forcedType>
                                    <userType>com.rbkmoney.reporter.util.json.FinalCashFlow</userType>
                                    <binding>com.rbkmoney.reporter.util.json.FinalCashFlowBinding</binding>
                                    <expression>.*\.payment.payment_cash_flow</expression>
                                </forcedType>
                                <forcedType>
                                    <userType>com.rbkmoney.reporter.util.json.FinalCashFlow</userType>
                                    <binding>com.rbkmoney.reporter.util.json.FinalCashFlowBinding</binding>
                                    <expression>.*\.adjustment.adjustment_cash_flow</expression>
                                </forcedType>
                                <forcedType>
                                    <userType>com.rbkmoney.reporter.util.json.FinalCashFlow</userType>
                                    <binding>com.rbkmoney.reporter.util.json.FinalCashFlowBinding</binding>
                                    <expression>.*\.adjustment.adjustment_cash_flow_inverse_old</expression>
                                </forcedType>
                                <forcedType>
                                    <userType>com.rbkmoney.reporter.util.json.FinalCashFlow</userType>
                                    <binding>com.rbkmoney.reporter.util.json.FinalCashFlowBinding</binding>
                                    <expression>.*\.refund.refund_cash_flow</expression>
                                </forcedType>
                                <forcedType>
                                    <userType>com.rbkmoney.reporter.util.json.PayoutSummary</userType>
                                    <binding>com.rbkmoney.reporter.util.json.PayoutSummaryBinding</binding>
                                    <expression>.*\.payout.payout_summary</expression>
                                </forcedType>
                                <forcedType>
                                    <userType>com.rbkmoney.reporter.util.json.FinalCashFlow</userType>
                                    <binding>com.rbkmoney.reporter.util.json.FinalCashFlowBinding</binding>
                                    <expression>.*\.payout.payout_cash_flow</expression>
                                </forcedType>
                                <forcedType>
                                    <userType>com.rbkmoney.reporter.util.json.FinalCashFlow</userType>
                                    <binding>com.rbkmoney.reporter.util.json.FinalCashFlowBinding</binding>
                                    <expression>.*\.data_with_cash_flows</expression>
                                </forcedType>
                            </forcedTypes>
                        </database>
                        <target>
                            <packageName>com.rbkmoney.reporter.domain</packageName>
                            <directory>target/generated-sources/jooq/</directory>
                        </target>
                    </generator>
                </configuration>
                <executions>
                    <execution>
                        <id>gen-src</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.rbkmoney.maven.plugins</groupId>
                <artifactId>pg-embedded-plugin</artifactId>
                <version>1.4</version>
                <configuration>
                    <dbName>${db.embedded.name}</dbName>
                    <schemas>
                        <schema>${db.embedded.schema}</schema>
                    </schemas>
                    <userName>${db.embedded.name}</userName>
                    <password>${db.embedded.password}</password>
                    <port>${db.embedded.port}</port>
                </configuration>
                <executions>
                    <execution>
                        <id>PG_server_start</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>PG_server_stop</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
